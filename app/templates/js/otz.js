// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    loadReviews();
    setupEventHandlers();
    updateStats();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ localStorage
function loadReviews() {
    const reviews = JSON.parse(localStorage.getItem('reviews')) || [];
    const reviewsList = document.getElementById('reviewsList');
    const emptyReviews = document.getElementById('emptyReviews');
    
    if (reviews.length === 0) {
        reviewsList.style.display = 'none';
        emptyReviews.style.display = 'block';
        return;
    }
    
    reviewsList.style.display = 'flex';
    emptyReviews.style.display = 'none';
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã
    const sortBy = document.getElementById('sortReviews').value;
    const sortedReviews = sortReviews(reviews, sortBy);
    
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
    reviewsList.innerHTML = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤—ã
    sortedReviews.forEach(review => {
        const reviewElement = createReviewElement(review);
        reviewsList.appendChild(reviewElement);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—Ç–∑—ã–≤–∞
function createReviewElement(review) {
    const reviewCard = document.createElement('div');
    reviewCard.className = 'review-card';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    const reviewDate = new Date(review.date).toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
    
    // –°–æ–∑–¥–∞–µ–º –∑–≤–µ–∑–¥—ã —Ä–µ–π—Ç–∏–Ω–≥–∞
    const starsHTML = createStarsHTML(review.rating);
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
    const serviceNames = {
        'purchase': '–ü–æ–∫—É–ø–∫–∞ —á–∞—Å–æ–≤',
        'repair': '–†–µ–º–æ–Ω—Ç —á–∞—Å–æ–≤',
        'buyout': '–°–∫—É–ø–∫–∞ —á–∞—Å–æ–≤',
        'consultation': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
        'other': '–î—Ä—É–≥–∞—è —É—Å–ª—É–≥–∞'
    };
    
    reviewCard.innerHTML = `
        <div class="review-header">
            <div class="reviewer-info">
                <div class="reviewer-name">${review.name}</div>
                ${review.service ? `<div class="review-service">${serviceNames[review.service] || review.service}</div>` : ''}
            </div>
            <div class="review-date">${reviewDate}</div>
        </div>
        
        <div class="review-rating">
            ${starsHTML}
        </div>
        
        <div class="review-text">
            ${review.text}
        </div>
        
        <div class="review-footer">
            <div class="review-id">ID: ${review.id}</div>
            <div class="review-actions">
                <button class="like-btn" data-id="${review.id}">
                    üëç –ü–æ–ª–µ–∑–Ω–æ (${review.likes || 0})
                </button>
                <button class="report-btn" data-id="${review.id}">
                    ‚öê –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è
                </button>
            </div>
        </div>
    `;
    
    return reviewCard;
}

// –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞
function createStarsHTML(rating) {
    let starsHTML = '';
    for (let i = 1; i <= 5; i++) {
        if (i <= rating) {
            starsHTML += '<span class="star">‚òÖ</span>';
        } else {
            starsHTML += '<span class="star empty">‚òÖ</span>';
        }
    }
    return starsHTML;
}

// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
function sortReviews(reviews, sortBy) {
    switch (sortBy) {
        case 'newest':
            return reviews.sort((a, b) => new Date(b.date) - new Date(a.date));
        case 'oldest':
            return reviews.sort((a, b) => new Date(a.date) - new Date(b.date));
        case 'highest':
            return reviews.sort((a, b) => b.rating - a.rating);
        case 'lowest':
            return reviews.sort((a, b) => a.rating - b.rating);
        default:
            return reviews;
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventHandlers() {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –æ—Ç–∑—ã–≤–∞
    document.getElementById('reviewForm').addEventListener('submit', function(e) {
        e.preventDefault();
        addReview();
    });
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
    document.getElementById('sortReviews').addEventListener('change', function() {
        loadReviews();
    });
    
    // –õ–∞–π–∫–∏ –∏ –∂–∞–ª–æ–±—ã
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('like-btn')) {
            const reviewId = e.target.dataset.id;
            likeReview(reviewId);
        }
        
        if (e.target.classList.contains('report-btn')) {
            const reviewId = e.target.dataset.id;
            reportReview(reviewId);
        }
    });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞
function addReview() {
    const form = document.getElementById('reviewForm');
    const formData = new FormData(form);
    
    const name = formData.get('name');
    const rating = parseInt(formData.get('rating'));
    const service = formData.get('service');
    const text = formData.get('text');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name || !rating || !text) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
    const newReview = {
        id: 'REV-' + Date.now(),
        name: name,
        rating: rating,
        service: service,
        text: text,
        date: new Date().toISOString(),
        likes: 0,
        reported: false
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    const reviews = JSON.parse(localStorage.getItem('reviews')) || [];
    reviews.push(newReview);
    localStorage.setItem('reviews', JSON.stringify(reviews));
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    form.reset();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    showSuccessMessage('–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    loadReviews();
    updateStats();
}

// –õ–∞–π–∫ –æ—Ç–∑—ã–≤–∞
function likeReview(reviewId) {
    const reviews = JSON.parse(localStorage.getItem('reviews')) || [];
    const reviewIndex = reviews.findIndex(review => review.id === reviewId);
    
    if (reviewIndex !== -1) {
        if (!reviews[reviewIndex].likes) {
            reviews[reviewIndex].likes = 0;
        }
        reviews[reviewIndex].likes++;
        localStorage.setItem('reviews', JSON.stringify(reviews));
        loadReviews();
    }
}

// –ñ–∞–ª–æ–±–∞ –Ω–∞ –æ—Ç–∑—ã–≤
function reportReview(reviewId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤?')) {
        return;
    }
    
    const reviews = JSON.parse(localStorage.getItem('reviews')) || [];
    const reviewIndex = reviews.findIndex(review => review.id === reviewId);
    
    if (reviewIndex !== -1) {
        reviews[reviewIndex].reported = true;
        localStorage.setItem('reviews', JSON.stringify(reviews));
        alert('–°–ø–∞—Å–∏–±–æ! –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤.');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    const reviews = JSON.parse(localStorage.getItem('reviews')) || [];
    
    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
    document.getElementById('totalReviews').textContent = reviews.length;
    
    // –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    if (reviews.length > 0) {
        const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
        const averageRating = (totalRating / reviews.length).toFixed(1);
        document.getElementById('averageRating').textContent = averageRating;
    } else {
        document.getElementById('averageRating').textContent = '0.0';
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
function showSuccessMessage(message) {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageDiv = document.createElement('div');
    messageDiv.style.cssText = `
        position: fixed;
        top: 100px;
        right: 20px;
        background: #E8F5E8;
        color: #2E7D32;
        padding: 16px 20px;
        border-radius: 8px;
        font-weight: 600;
        z-index: 1000;
        max-width: 400px;
        border: 1px solid #C8E6C9;
        animation: slideInRight 0.3s ease;
    `;
    messageDiv.textContent = message;
    
    document.body.appendChild(messageDiv);
    
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (messageDiv.parentNode) {
            messageDiv.parentNode.removeChild(messageDiv);
        }
    }, 5000);
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
const style = document.createElement('style');
style.textContent = `
    @keyframes slideInRight {
        from {
            opacity: 0;
            transform: translateX(100%);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
`;
document.head.appendChild(style);